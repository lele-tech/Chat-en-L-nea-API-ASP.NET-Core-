@{
    ViewData["Title"] = "Chat en Línea";
    var userName = User.Identity.IsAuthenticated ? User.Identity.Name : "Invitado"; // Obtiene el nombre del usuario autenticado
}

<h2>Chat en Línea</h2>

<!-- Muestra el nombre del usuario -->
<div id="userInfo" class="mb-4 text-center">
    <p>Bienvenido, <strong>@userName</strong></p>
</div>

<div id="groupSelection">
    <h3>Selecciona un grupo para unirte</h3>
    <div id="groupCards" class="flex flex-wrap gap-4 justify-center">
        <!-- Tarjetas de grupos -->
        <div class="group-card" data-group="Grupo1">
            <div class="card border border-gray-300 rounded-lg shadow-lg overflow-hidden p-4">
                <h4 class="text-xl font-semibold mb-2">Grupo 1</h4>
                <p class="text-sm mb-4">Descripción del grupo 1.</p>
                <button class="join-group-button bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition">
                    Unirse
                </button>
            </div>
        </div>
        <div class="group-card" data-group="Grupo2">
            <div class="card border border-gray-300 rounded-lg shadow-lg overflow-hidden p-4">
                <h4 class="text-xl font-semibold mb-2">Grupo 2</h4>
                <p class="text-sm mb-4">Descripción del grupo 2.</p>
                <button class="join-group-button bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition">
                    Unirse
                </button>
            </div>
        </div>
        <div class="group-card" data-group="Grupo3">
            <div class="card border border-gray-300 rounded-lg shadow-lg overflow-hidden p-4">
                <h4 class="text-xl font-semibold mb-2">Grupo 3</h4>
                <p class="text-sm mb-4">Descripción del grupo 3.</p>
                <button class="join-group-button bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition">
                    Unirse
                </button>
            </div>
        </div>
    </div>
</div>

<div id="chatSection" style="display: none;">
    <h3>Grupo: <span id="groupNameDisplay"></span></h3>
    <ul id="messagesList">
        <!-- Los mensajes serán cargados dinámicamente aquí -->
    </ul>
    <div>
        <input type="text" id="messageInput" placeholder="Escribe un mensaje..." class="border border-gray-300 rounded-lg p-2 w-full mt-2" />
        <button id="sendButton" class="bg-gray-400 text-white py-2 rounded-lg mt-2 w-full" disabled>Enviar</button>
    </div>
    <!-- Botón para salir del grupo -->
    <button id="leaveGroupButton" class="bg-red-500 text-white py-2 rounded-lg mt-4 w-full hidden">
        Salir del grupo
    </button>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
<script>
    const userName = "@userName"; // Nombre de usuario desde Razor
    const connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();
    let currentGroup = "";

    // Recibir mensajes del servidor y mostrarlos en la lista
    connection.on("ReceiveMessage", (user, message, time) => {
        const msg = document.createElement("li");

        // Crear el contenido del mensaje con la hora
        msg.innerHTML = `${user}: ${message} <span class="text-gray-500 text-sm"> - ${time}</span>`;

        document.getElementById("messagesList").appendChild(msg);
    });

    // Función para cargar los mensajes desde el servidor
    function loadMessages() {
        fetch('@Url.Action("Chat", "Chats")') // Reemplaza "Home" con el controlador adecuado si es necesario
            .then(response => response.json())
            .then(messages => {
                const messagesList = document.getElementById("messagesList");
                messagesList.innerHTML = ""; // Limpiar lista de mensajes

                messages.forEach(message => {
                    const msg = document.createElement("li");
                    msg.innerHTML = `${message.userName}: ${message.Mensaje} <span class="text-gray-500 text-sm"> - ${message.time}</span>`;
                    messagesList.appendChild(msg);
                });
            })
            .catch(error => console.error('Error cargando mensajes:', error));
    }

    // Unirse al grupo seleccionado
    document.querySelectorAll(".join-group-button").forEach(button => {
        button.addEventListener("click", function () {
            const groupName = this.closest(".group-card").getAttribute("data-group");

            if (groupName) {
                // Limpiar la lista de mensajes al cambiar de grupo
                document.getElementById("messagesList").innerHTML = "";

                if (currentGroup) {
                    connection.invoke("LeaveGroup", currentGroup).catch(err => console.error(err.toString()));
                }

                connection.invoke("JoinGroup", groupName).then(() => {
                    currentGroup = groupName;
                    document.getElementById("groupNameDisplay").textContent = groupName;
                    document.getElementById("groupSelection").style.display = "none";
                    document.getElementById("chatSection").style.display = "block";
                    document.getElementById("sendButton").disabled = false; // Habilitar el botón de enviar mensaje
                    document.getElementById("leaveGroupButton").style.display = "block"; // Mostrar el botón de salir
                    loadMessages(); // Cargar los mensajes del grupo
                    alert(`Te has unido al grupo: ${groupName}`);
                }).catch(err => console.error(err.toString()));
            }
        });
    });

    // Enviar mensaje
    document.getElementById("sendButton").addEventListener("click", function () {
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value;

        if (currentGroup) {
            // Obtener la hora actual en formato 24 horas
            const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            // Enviar el mensaje junto con la hora
            connection.invoke("SendMessageToGroup", currentGroup, userName, message, currentTime).catch(function (err) {
                return console.error(err.toString());
            });

            messageInput.value = ""; // Limpiar el campo de entrada
        } else {
            alert("Por favor, únete a un grupo antes de enviar un mensaje.");
        }
    });

    // Salir del grupo
    document.getElementById("leaveGroupButton").addEventListener("click", function () {
        if (currentGroup) {
            connection.invoke("LeaveGroup", currentGroup).then(() => {
                alert(`Has salido del grupo: ${currentGroup}`);
                document.getElementById("groupSelection").style.display = "block"; // Mostrar selección de grupo
                document.getElementById("chatSection").style.display = "none"; // Ocultar sección de chat
                document.getElementById("leaveGroupButton").style.display = "none"; // Ocultar botón de salir
            }).catch(err => console.error(err.toString()));
        }
    });

    // Conectar al hub
    connection.start().catch(function (err) {
        return console.error(err.toString());
    });
</script>

<style>
    /* Estilos para las tarjetas de los grupos */
    #groupCards {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .group-card {
        width: 220px;
    }

        .group-card .card {
            padding: 20px;
            background-color: white;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .group-card:hover .card {
            transform: scale(1.05);
        }

        .group-card h4 {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .group-card p {
            font-size: 14px;
            margin-bottom: 15px;
        }

    .join-group-button {
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .join-group-button:hover {
            background-color: #45a049;
        }

    #chatSection {
        margin-top: 20px;
    }

    /* Estilo para el área de usuario */
    #userInfo {
        font-size: 16px;
        color: #333;
    }
</style>
